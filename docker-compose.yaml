

services:
  api:
    build: api-service/
    ports:
      - "8000:8000"
    container_name: api-service
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_ADRESS=${RABBITMQ_ADRESS}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
    depends_on:
      rabbitmq:
        condition: service_healthy


  rabbitmq: 
    container_name: rabbitmq
    image: rabbitmq:4-management
    ports: ["5672:5672", "15672:15672"]
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 3s
      retries: 20


  runner:
    container_name: runner
    build: worker-service
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_ADRESS=${RABBITMQ_ADRESS}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
    depends_on:
      rabbitmq:
        condition: service_healthy


  db:
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - dbdata:/var/lib/postgresql/data


  migrate:
    image: migrate/migrate
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./db/migrations:/migrations
    environment:
      DATABASE_URL: ${DATABASE_URL}
    command: [
      "-path", "/migrations",
      "-database", "${DATABASE_URL}",
      "up"
    ]
    
volumes:
  dbdata:
